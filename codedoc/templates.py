"""
Templates Module for CodeDoc AI üé®

Handles HTML and Markdown template rendering for documentation output.
"""

import json
from typing import Dict, Any, List
from datetime import datetime


class HTMLTemplate:
    """HTML template renderer for documentation."""
    
    def render(self, data: Dict[str, Any]) -> str:
        """Render data to HTML format."""
        html = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{data.get('file_path', 'Documentation')} - CodeDoc AI</title>
    <style>
        body {{ font-family: -apple-system, 'Segoe UI', sans-serif; margin: 40px; background: #f5f5f5; }}
        .container {{ max-width: 1200px; margin: 0 auto; background: white; padding: 40px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
        h1 {{ color: #2563eb; border-bottom: 2px solid #2563eb; padding-bottom: 10px; }}
        h2 {{ color: #1e40af; margin-top: 30px; }}
        h3 {{ color: #3b82f6; }}
        .function, .class {{ background: #f8fafc; border-left: 4px solid #3b82f6; padding: 20px; margin: 20px 0; border-radius: 5px; }}
        .docstring {{ color: #6b7280; margin: 10px 0; font-style: italic; }}
        .params {{ background: #ecfdf5; padding: 10px; border-radius: 5px; margin: 10px 0; }}
        .code {{ background: #1e293b; color: #e2e8f0; padding: 15px; border-radius: 5px; overflow-x: auto; font-family: 'SF Mono', Monaco, monospace; }}
        .stats {{ background: #dbeafe; padding: 15px; border-radius: 5px; margin: 20px 0; }}
        .tag {{ background: #3b82f6; color: white; padding: 2px 6px; border-radius: 3px; font-size: 12px; margin-right: 5px; }}
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>üìö {data.get('file_path', 'Documentation')}</h1>
            <div class="stats">
                <span class="tag">{data.get('language', 'Unknown').upper()}</span>
                <span class="tag">{data.get('total_functions', 0)} Functions</span>
                <span class="tag">{data.get('total_classes', 0)} Classes</span>
                <span class="tag">Generated: {datetime.now().strftime('%Y-%m-%d %H:%M')}</span>
            </div>
        </header>
        
        <main>
        """
        
        # Add functions
        if data.get('functions'):
            html += "<h2>üîß Functions</h2>"
            for func in data['functions']:
                html += self._render_function(func)
        
        # Add classes
        if data.get('classes'):
            html += "<h2>üèóÔ∏è Classes</h2>"
            for cls in data['classes']:
                html += self._render_class(cls)
        
        html += """
        </main>
        
        <footer style="margin-top: 40px; text-align: center; color: #6b7280; border-top: 1px solid #e5e7eb; padding-top: 20px;">
            <p>Generated by <strong>CodeDoc AI</strong> üöÄ - Smart Documentation Generator</p>
        </footer>
    </div>
</body>
</html>
        """
        
        return html
    
    def _render_function(self, func: Dict[str, Any]) -> str:
        """Render a single function."""
        params_str = ", ".join(func.get('params', []))
        
        html = f"""
        <div class="function">
            <h3>‚ö° {func['name']}({params_str})</h3>
        """
        
        if func.get('docstring'):
            html += f'<div class="docstring">"{func["docstring"]}"</div>'
        
        if func.get('params'):
            html += f'<div class="params"><strong>Parameters:</strong> {", ".join(func["params"])}</div>'
        
        if func.get('return_type'):
            html += f'<div class="params"><strong>Returns:</strong> {func["return_type"]}</div>'
        
        if func.get('source_code'):
            html += f'<div class="code">{self._escape_html(func["source_code"])}</div>'
        
        html += "</div>"
        return html
    
    def _render_class(self, cls: Dict[str, Any]) -> str:
        """Render a single class."""
        html = f"""
        <div class="class">
            <h3>üèóÔ∏è {cls['name']}</h3>
        """
        
        if cls.get('docstring'):
            html += f'<div class="docstring">"{cls["docstring"]}"</div>'
        
        if cls.get('methods'):
            html += f'<div class="params"><strong>Methods ({len(cls["methods"])}):</strong> '
            method_names = [m['name'] for m in cls['methods']]
            html += ", ".join(method_names)
            html += '</div>'
        
        if cls.get('source_code'):
            html += f'<div class="code">{self._escape_html(cls["source_code"])}</div>'
        
        html += "</div>"
        return html
    
    def _escape_html(self, text: str) -> str:
        """Escape HTML characters."""
        return text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
    
    def render_project(self, data: Dict[str, Any]) -> str:
        """Render multiple files as a project."""
        # Simplified project rendering
        html_parts = [self.render(file_data) for file_data in data.get('files', [])]
        return "\n\n".join(html_parts)


class MarkdownTemplate:
    """Markdown template renderer for documentation."""
    
    def render(self, data: Dict[str, Any]) -> str:
        """Render data to Markdown format."""
        md = f"""# üìö {data.get('file_path', 'Documentation')}

**Language:** {data.get('language', 'Unknown').upper()}  
**Functions:** {data.get('total_functions', 0)}  
**Classes:** {data.get('total_classes', 0)}  
**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M')}

---

"""
        
        # Add functions
        if data.get('functions'):
            md += "## üîß Functions\n\n"
            for func in data['functions']:
                md += self._render_function(func)
        
        # Add classes
        if data.get('classes'):
            md += "## üèóÔ∏è Classes\n\n"
            for cls in data['classes']:
                md += self._render_class(cls)
        
        md += "\n---\n*Generated by **CodeDoc AI** üöÄ - Smart Documentation Generator*\n"
        
        return md
    
    def _render_function(self, func: Dict[str, Any]) -> str:
        """Render a single function in Markdown."""
        params_str = ", ".join(func.get('params', []))
        
        md = f"### ‚ö° `{func['name']}({params_str})`\n\n"
        
        if func.get('docstring'):
            md += f"> {func['docstring']}\n\n"
        
        if func.get('params'):
            md += f"**Parameters:** {', '.join(func['params'])}  \n"
        
        if func.get('return_type'):
            md += f"**Returns:** {func['return_type']}  \n"
        
        if func.get('source_code'):
            language = func.get('language', 'python')
            md += f"\n```{language}\n{func['source_code']}\n```\n\n"
        
        return md
    
    def _render_class(self, cls: Dict[str, Any]) -> str:
        """Render a single class in Markdown."""
        md = f"### üèóÔ∏è `{cls['name']}`\n\n"
        
        if cls.get('docstring'):
            md += f"> {cls['docstring']}\n\n"
        
        if cls.get('methods'):
            md += f"**Methods ({len(cls['methods'])}):** "
            method_names = [m['name'] for m in cls['methods']]
            md += ", ".join(method_names)
            md += "  \n\n"
        
        if cls.get('source_code'):
            language = cls.get('language', 'python')
            md += f"```{language}\n{cls['source_code']}\n```\n\n"
        
        return md
    
    def render_project(self, data: Dict[str, Any]) -> str:
        """Render multiple files as a project."""
        # Simplified project rendering
        md_parts = [self.render(file_data) for file_data in data.get('files', [])]
        return "\n\n".join(md_parts) 